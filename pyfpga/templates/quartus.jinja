#
# PyFPGA
# Copyright (C) 2015-2024 Rodrigo A. Melo
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

set PRESYNTH #PRESYNTH#
set PROJECT  #PROJECT#
set PART     #PART#
set FAMILY   #FAMILY#
set DEVICE   #DEVICE#
set PACKAGE  #PACKAGE#
set SPEED    #SPEED#
set TOP      #TOP#
# TASKS = prj syn par bit
set TASKS    [list #TASKS#]

set PARAMS   [list #PARAMS#]

proc fpga_files {} {
#FILES#
}

proc fpga_create { PROJECT } {
    package require ::quartus::project
    project_new $PROJECT -overwrite
    set_global_assignment -name NUM_PARALLEL_PROCESSORS ALL
}

proc fpga_open { PROJECT } {
    package require ::quartus::flow
    project_open -force $PROJECT.qpf
}

proc fpga_close {} {
    project_close
}

proc fpga_part { PART } {
    set_global_assignment -name DEVICE $PART
}

proc fpga_file {FILE {LIBRARY "work"}} {
    set message "adding the file '$FILE'"
    if { $LIBRARY != "work" } { append message " (into the VHDL library '$LIBRARY')" }
    regexp -nocase {\.(\w*)$} $FILE -> ext
    if { $ext == "tcl" } {
        source $FILE
        return
    }
    if {$ext == "v"} {
        set TYPE VERILOG_FILE
    } elseif {$ext == "sv"} {
        set TYPE SYSTEMVERILOG_FILE
    } elseif {$ext == "vhdl" || $ext == "vhd"} {
        set TYPE VHDL_FILE
    } elseif {$ext == "sdc"} {
        set TYPE SDC_FILE
    } else {
        set TYPE SOURCE_FILE
    }
    if { $LIBRARY != "work" } {
        set_global_assignment -name $TYPE $FILE -library $LIBRARY
    } else {
        set_global_assignment -name $TYPE $FILE
    }
}

proc fpga_include {PATH} {
    lappend INCLUDED $PATH
    # Verilog Included Files are NOT added
    foreach INCLUDE $INCLUDED {
        set_global_assignment -name SEARCH_PATH $INCLUDE
    }
}

proc fpga_top { TOP } {
    set_global_assignment -name TOP_LEVEL_ENTITY $TOP
}

proc fpga_params {} {
    if { [llength $PARAMS] == 0 } { return }
    foreach PARAM $PARAMS {
        eval "set_parameter -name $PARAM"
    }
}

proc fpga_run_syn {} {
    execute_module -tool map
}

proc fpga_run_par {} {
    execute_module -tool fit
    execute_module -tool sta
}

proc fpga_run_bit {} {
    execute_module -tool asm
}

if { [lsearch -exact $TASKS "prj"] >= 0 } {
    fpga_create $PROJECT
    fpga_part $PART
    {{ PRECFG }}
    fpga_files
    fpga_top $TOP
    fpga_params
    {{ POSTCFG }}
    fpga_close
}

if { [lsearch -regexp $TASKS "syn|par|bit"] >= 0 } {
    fpga_open $PROJECT
    if { [lsearch -exact $TASKS "syn"] >= 0 } {
        {{ PRESYN }}
        fpga_run_syn
    }
    if { [lsearch -exact $TASKS "par"] >= 0 } {
        {{ PREPAR }}
        fpga_run_par
    }
    if { [lsearch -exact $TASKS "bit"] >= 0 } {
        {{ PREBIT }}
        fpga_run_bit
        {{ POSTBIT }}
    }
    fpga_close
}
