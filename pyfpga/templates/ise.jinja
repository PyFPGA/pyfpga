{#
#
# Copyright (C) 2015-2024 PyFPGA Project
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
#}

{% if cfg %}# Project configuration -------------------------------------------------------

if { [ file exists {{ project }}.xise ] } { file delete {{ project }}.xise }
project new {{ project }}.xise
project set family  {{ family }}
project set device  {{ device }}
project set package {{ package }}
project set speed  -{{ speed }}

{{ precfg }}

{% if files %}# Files inclusion
{% for name, attr in files.items() %}
{% if 'lib' in attr %}lib_vhdl new {{ attr.lib }}{% endif %}
xfile add {{ name }}{% if 'lib' in attr %} -lib_vhdl {{ attr.lib }}{% endif %}
{% endfor %}
{% endif %}

{% if constraints %}# Constraints inclusion
{% for name, attr in constraints.items() %}
xfile add {{ name }}
{% if name.endswith('.xcf') %}
project set "Synthesis Constraints File" "{{ name }}" -process "Synthesize - XST"
{% endif %}
{% endfor %}
{% endif %}

{% if top %}# Top-level specification
project set top {{ top }}
{% endif %}

{% if includes %}# Verilog Includes
project set "Verilog Include Directories" "{{ includes | join('|') }}" -process "Synthesize - XST"
{% endif %}

{% if defines %}# Verilog Defines
project set "Verilog Macros" "{{ defines.items() | map('join', '=') | join(' | ') }}" -process "Synthesize - XST"
{% endif %}

{% if params %}# Verilog Parameters / VHDL Generics
project set "Generics, Parameters" "{{ params.items() | map('join', '=') | join(' ') }}" -process "Synthesize - XST"
{% endif %}

{{ postcfg }}

project close

{% endif %}

{% if syn or par or bit %}# Design flow -----------------------------------------------------------------

project open {{ project }}.xise

{% if syn %}# Synthesis

{{ presyn }}

# PRESYNTH
#project set top_level_module_type "EDIF"
project clean
process run "Synthesize"
if { [process get "Synthesize" status] == "errors" } { exit 1 }

{{ postsyn }}

{% endif %}

{% if par %}# Place and Route

{{ prepar }}

process run "Translate"
if { [process get "Translate" status] == "errors" } { exit 1 }
process run "Map"
if { [process get "Map" status] == "errors" } { exit 1 }
process run "Place & Route"
if { [process get "Place & Route" status] == "errors" } { exit 1 }

{{ postpar }}

{% endif %}

{% if bit %}# Bitstream generation

{{ prebit }}

process run "Generate Programming File"
if { [process get "Generate Programming File" status] == "errors" } { exit 1 }
catch { file rename -force {{ top }}.bit {{ project }}.bit }

{{ postbit }}

{% endif %}

project close

{% endif %}
