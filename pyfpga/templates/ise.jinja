{#
#
# Copyright (C) 2015-2024 PyFPGA Project
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
#}

{% if CFG %}# Project configuration -------------------------------------------------------

if { [ file exists {{ PROJECT }}.xise ] } { file delete {{ PROJECT }}.xise }
project new {{ PROJECT }}.xise
project set family  {{ FAMILY }}
project set device  {{ DEVICE }}
project set package {{ PACKAGE }}
project set speed  -{{ SPEED }}

{{ PRECFG }}

{% if FILES %}# Files inclusion
{% for name, attr in FILES.items() %}
{% if 'lib' in attr %}lib_vhdl new {{ attr.lib }}{% endif %}
xfile add {{ name }}{% if 'lib' in attr %} -lib_vhdl {{ attr.lib }}{% endif %}
{% endfor %}
{% endif %}

{% if CONSTRAINTS %}# Constraints inclusion
{% for name, attr in CONSTRAINTS.items() %}
xfile add {{ name }}
{% if name.endswith('.xcf') %}
project set "Synthesis Constraints File" "{{ name }}" -process "Synthesize - XST"
{% endif %}
{% endfor %}
{% endif %}

{% if TOP %}# Top-level specification
project set top {{ TOP }}
{% endif %}

{% if INCLUDES %}# Verilog Includes
project set "Verilog Include Directories" "{{ INCLUDES | join('|') }}" -process "Synthesize - XST"
{% endif %}

{% if DEFINES %}# Verilog Defines
project set "Verilog Macros" "{{ DEFINES.items() | map('join', '=') | join(' | ') }}" -process "Synthesize - XST"
{% endif %}

{% if PARAMS %}# Verilog Parameters / VHDL Generics
project set "Generics, Parameters" "{{ PARAMS.items() | map('join', '=') | join(' ') }}" -process "Synthesize - XST"
{% endif %}

{{ POSTCFG }}

project close

{% endif %}

{% if SYN or PAR or BIT %}# Design flow -----------------------------------------------------------------

project open {{ PROJECT }}.xise

{% if SYN %}# Synthesis

{{ PRESYN }}

# PRESYNTH
#project set top_level_module_type "EDIF"
project clean
process run "Synthesize"
if { [process get "Synthesize" status] == "errors" } { exit 1 }

{{ POSTSYN }}

{% endif %}

{% if PAR %}# Place and Route

{{ PREPAR }}

process run "Translate"
if { [process get "Translate" status] == "errors" } { exit 1 }
process run "Map"
if { [process get "Map" status] == "errors" } { exit 1 }
process run "Place & Route"
if { [process get "Place & Route" status] == "errors" } { exit 1 }

{{ POSTPAR }}

{% endif %}

{% if BIT %}# Bitstream generation

{{ PREBIT }}

process run "Generate Programming File"
if { [process get "Generate Programming File" status] == "errors" } { exit 1 }
catch { file rename -force {{ TOP }}.bit {{ PROJECT }}.bit }

{{ POSTBIT }}

{% endif %}

project close

{% endif %}
