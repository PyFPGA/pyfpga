#!/usr/bin/env python3

#
# Copyright (C) 2022-2024 PyFPGA Project
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

import argparse
import re
import subprocess


parser = argparse.ArgumentParser()

parser.add_argument('-mode', choices=['batch'], required=True)
parser.add_argument('-notrace', action='store_true', required=True)
parser.add_argument('-quiet', action='store_true', required=True)
parser.add_argument('-source', required=True)

args = parser.parse_args()

tool = parser.prog

#proc create_project    args {{ }}
#proc open_project      args {{ }}
#proc current_project   args {{ }}
#proc current_fileset   args {{ }}
#proc get_filesets      args {{ }}
#proc set_property      args {{ }}
#proc add_files         args {{ }}
#proc get_files         args {{ }}
#proc reset_run         args {{ }}
#proc launch_runs       args {{ }}
#proc get_runs          args {{ }}
#proc wait_on_run       args {{ }}
#proc open_run          args {{ }}
#proc write_bitstream   args {{ }}
#proc close_project     args {{ }}
#proc current_bd_design args {{ }}
#proc get_bd_cells      args {{ }}

tcl = f'''
proc unknown args {{ }}

proc get_runs {{run_name}} {{
  return $run_name
}}

proc get_property {{property run}} {{
  if {{ $property eq "STATUS" }} {{
    if {{ $run eq "synth_1" }} {{
      return "synth_design Complete!"
    }} elseif {{ $run eq "impl_1" }} {{
      return "route_design Complete!"
    }}
  }}
  return ""
}}

source {args.source}
'''

with open(f'{tool}-mock.tcl', 'w', encoding='utf-8') as file:
    file.write(tcl)

subprocess.run(
   f'tclsh {tool}-mock.tcl',
   shell=True,
   check=True,
   universal_newlines=True
)

pattern = r'create_project\s+-force\s+(\S+)'
with open(args.source, 'r', encoding='utf-8') as file:
    match = re.search(pattern, file.read())
    if match:
        project = match.group(1)
        with open(f'{project}.bit', 'w', encoding='utf-8') as file:
            pass

print(f'INFO:the {tool.upper()} mock has been executed')
